package com.contact.controller;

import java.awt.print.Pageable;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.security.Principal;
import java.util.List;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ClassPathResource;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.repository.CrudRepository;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.contact.Repository.ContactRepo;
import com.contact.Repository.Crepo;
import com.contact.entity.Contact;
import com.contact.entity.User;
import com.contact.helper.Message;

@Controller
@RequestMapping("/user")
public class UserControl {
	@Autowired
	private Crepo crepo;
	private Object userRepository;

	@Autowired
	private ContactRepo contactrepo;

	// adding data to common response
	@ModelAttribute
	public void addCommonData(Model model, Principal principal) {

		String username = principal.getName();
		System.out.println("username: " + username);

		User userByUserName = crepo.getUserByUserName(username);
		System.out.println(userByUserName);

		model.addAttribute("user", userByUserName);
	}

// dashboard	
	@RequestMapping("/index")
	public String dashboard(Model model, Principal principal) {
		model.addAttribute("title", "User Dashboard");
		return "Normal/user_dash";
	}

	// open add form controller
	@GetMapping("/add_contact")
	public String openAddContactForm(Model model) {
		model.addAttribute("title", "Add Contact");
		model.addAttribute("contact", new Contact());
		return "normal/add_contact";
	}

//processing add contact form
	@PostMapping("/process-contact")
	public String processContact(@ModelAttribute Contact contact, @RequestParam("profileImage") MultipartFile file,
			Principal principal, HttpSession session) {
		try {
			String name = principal.getName();
			User user = crepo.getUserByUserName(name); // Use the autowired repository directly
			// processing file
			if (file.isEmpty()) {
				// file is empty
				System.out.println("empty");
				contact.setImageurl("default.png")
				
			} else {
				// upload file
				contact.setImageurl(file.getOriginalFilename());
				File savefile = new ClassPathResource("static/image").getFile();
				Path path = Paths.get(savefile.getAbsolutePath() + File.separator + file.getOriginalFilename());
				Files.copy(file.getInputStream(), path, StandardCopyOption.REPLACE_EXISTING);
				System.out.println("uploaded");
			}
			contact.setUser(user);

			user.getContacts().add(contact);
			crepo.save(user); // Save the user using the repository
			System.out.println("Data" + contact);
			System.out.println("Added");

			// successfull message
			session.setAttribute("message", new Message("Your contact is added successfully!!", "success"));
		} catch (Exception e) {
			// TODO: handle exception
			System.out.println("Error" + e.getMessage());
			e.printStackTrace();

			// error message
			session.setAttribute("message", new Message("Something Went Wrong!!", "danger"));

		}
		return "normal/add_contact";
	}

	// show contact handler

	@GetMapping("/showContact/{page}")
	public String showContact(@PathVariable("page") Integer page, Model m, Principal principal) {
		m.addAttribute("title", "Show User Contacts");

		// bringing the contacts from the database with reference to the user
		String userName = principal.getName();
		User user = crepo.getUserByUserName(userName);

		PageRequest pageable = PageRequest.of(page, 6);
		Page<Contact> contacts = (Page<Contact>) this.contactrepo.findContactByUser(user.getId(), pageable);

		m.addAttribute("contacts", contacts);
		m.addAttribute("currentPage", page);
		m.addAttribute("totalPages",contacts.getTotalPages());
		return "Normal/showContact";

	}
}
